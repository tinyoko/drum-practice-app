# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

This is a Django-based drum practice application that synchronizes audio playback with sheet music (PDF) viewing. The app allows users to upload songs and drum sheets, set timing markers for automatic page turning, and practice along with synchronized audio and visual guidance.

## Key Architecture

- **Django Project**: `drum_practice/` - Main Django project directory
- **Core App**: `practice/` - Contains all application logic
- **Models**: 
  - `Song` - Audio files with metadata
  - `Sheet` - PDF drum sheets linked to songs (OneToOne)
  - `PageTiming` - Timing markers for automatic page transitions
- **Media Storage**: `/media/audio/` for audio files, `/media/sheets/` for PDFs
- **Database**: SQLite (`db.sqlite3`)

## Development Setup

The project uses a virtual environment located at `drum_practice_env/` (outside the main project directory).

### Required Dependencies
```
Django==4.2.7
Pillow==10.1.0
python-decouple==3.8
```

### Environment Configuration
- Uses `python-decouple` for environment variables
- Requires `.env` file with `SECRET_KEY` and `DEBUG` settings
- Settings configured in `drum_practice/settings.py`

## Common Commands

```bash
# Activate virtual environment
source drum_practice_env/bin/activate

# Install dependencies
pip install -r drum_practice/requirements.txt

# Run development server
cd drum_practice && python manage.py runserver

# Apply database migrations
cd drum_practice && python manage.py migrate

# Create new migrations
cd drum_practice && python manage.py makemigrations

# Access Django admin
cd drum_practice && python manage.py createsuperuser

# Run tests
cd drum_practice && python manage.py test
```

## Application Flow

1. **Song Upload**: Users upload MP3 audio files via `upload_song` view
2. **Sheet Upload**: After song upload, users upload corresponding PDF drum sheets
3. **Timing Setup**: Users set page timing markers via `set_page_timing` view
4. **Practice Mode**: `song_detail` view provides synchronized audio playback with automatic PDF page turning

## Key Features

- **File Upload**: Audio (MP3) and PDF handling with Django's FileField
- **Timing Synchronization**: JavaScript-driven audio/PDF synchronization
- **Bootstrap UI**: Frontend styled with Bootstrap 5.1.3
- **Japanese Localization**: UI messages and labels in Japanese
- **AJAX API**: JSON endpoint for retrieving page timings (`get_page_timings`)

## File Structure Notes

- Audio files stored in `media/audio/`
- PDF sheets stored in `media/sheets/`  
- Templates in `practice/templates/practice/`
- Static files served via Django's development server
- Database migrations in `practice/migrations/`